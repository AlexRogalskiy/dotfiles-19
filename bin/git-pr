#!/usr/bin/env node
const https = require('https')
const path = require('path')
const url = require('url')
const {homedir} = require('os')
const {execSync} = require('child_process')
const {readFileSync} = require('fs')

const get = (path, options) => new Promise((resolve, reject) => {
  const opts = {
    protocol: 'https:',
    host: 'api.github.com',
    path,
  ...options}
  const req = https.get(opts, res => {
    let body = ''
    res.on('data', chunk => {
      body += chunk
    })
    res.on('end', () => {
      res.statusCode === 200
        ? resolve(JSON.parse(body))
        : reject(Error(`request failed with status code ${res.statusCode}: ${body}`))
    })
  })
  req.on('error', reject)
})

const open = (url) => {
  process.platform === 'darwin'
    ? execSync(`open "${url}"`)
    : execSync(`xdg-open "${url}"`)
}

const cmd = (script) => execSync(script, {encoding: 'utf8'}).trim()

const main = async () => {

  const upstream = cmd('git config --get remote.upstream.url')
  const repo = upstream.match(/^git@github.com:([\w\/]+).git$/)[1]
  const branch = cmd('git rev-parse --abbrev-ref HEAD')
  const token = readFileSync(path.join(homedir(), '.gh_token'), {encoding: 'utf8'}).trim()

  const query = `head:"${branch}" repo:"${repo}"`

  const search = `/search/issues?q=${encodeURIComponent(query)}`
  const headers = {
    'Authorization': `token ${token}`,
    'User-Agent': '@qrohlf/git-pr'
  }

  try {
    const {items} = await get(search, {headers})
    if (items.length === 0) {
      console.log(`no PRs found for branch '${branch}'`)
      process.exit(1)
    }
    if (items.length > 1) {
      const webSearch = `https://github.com/issues?utf8=âœ“&q=${encodeURIComponent(query)}`
      console.log(`multiple PRs found, see ${webSearch} for list`)
    }
    const url = items[0].html_url
    console.log('ðŸŒŽ opening ' + url + '\n')
    open(url)
  } catch (e) {
    console.log(e)
    process.exit(1)
  }
}

main()
